
        variationInit(this);
    }
  
    ProductSingle.prototype.variationMatch = function () {
        var self = this;
        self.$priceWrap.find('span').text('$' + (Math.round(Math.random() * 50) + 200) + '.00');
        self.$priceWrap.slideDown();
        self.$clean.slideDown();
        self.$btnCart.removeClass('disabled');
    }
    ProductSingle.prototype.variationClean = function (reset) {
        reset && this.$selects.val('');
        reset && this.$items.children('.active').removeClass('active');
        this.$priceWrap.slideUp();
        this.$clean.css('display', 'none');
    }
    ProductSingle.prototype.clickStickyThumbnail = function (e) {
        var self = this;
        var $thumb = $(e.currentTarget);
        var currentIndex = $thumb.parent().children('.active').index();
        var newIndex = $thumb.index() + 1;
        $thumb.addClass('active').siblings('.active').removeClass('active');
        this.isStickyScrolling = true;
        var target = $thumb.closest('.product-thumbs-sticky').find('.product-image-wrapper > :nth-child(' + newIndex + ')');
        if (target.length) {
            target = target.offset().top + 10;
            Trabna.scrollTo(target, 500);
        }
        setTimeout(function () {
            self.isStickyScrolling = false;
        }, 300);
    }
    ProductSingle.prototype.scrollStickyThumbnail = function () {
        var self = this;
        if (!this.isStickyScrolling) {
            self.$wrapper.find('.product-image-wrapper .product-image').each(function () {
                if (Trabna.isOnScreen(this)) {
                    self.$wrapper.find('.product-thumbs > :nth-child(' + ($(this).index() + 1) + ')')
                        .addClass('active').siblings().removeClass('active');
                    return false;
                }
            });
        }
    }
    ProductSingle.prototype.swatchImage = function () {
        var src = this.$items.find('.active img').attr('src'),
            productImage = this.$wrapper.find('.swiper-slide:first-child .product-image img'),
            thumbImage = this.$wrapper.find('.swiper-slide:first-child .product-thumb img');
        productImage.attr('src', src);
        thumbImage.attr('src', src);
    }
    Trabna.productSingle = function (selector) {
        Trabna.$(selector).each(function () {
            var $this = $(this);
            if (!$this.is('body > *')) {
                $this.data('product-single', new ProductSingle($this));
            }
        })
        return null;
    }
})(jQuery);
/**
 * Trabna Plugin - Product Single Page
 * 
 * @requires Slider
 * @requires ProductSingle
 * @requires PhotoSwipe
 * @instance single
 */
(function ($) {
    // Open Image Gallery
    function openImageGallery(e) {
		console.log("openImageGallery")
        e.preventDefault();
        var $this = $(e.currentTarget),
            $product = $this.closest('.product-single'),
            $review = $this.closest('.review-image'),
            $images, images;
        if ($this.closest('.review-image').length) {
            $images = $this.closest('.review-image').find('img');
        } else if ($product.find('.product-single-swiper').length) { // single carousel
            $images = $product.find('.product-single-swiper .swiper-slide:not(.cloned) img:first-child');
        } else if ($product.find('.product-gallery-carousel').length) { // gallery carousel
            $images = $product.find('.product-gallery-carousel .swiper-slide:not(.cloned) img');
        } else { // simple gallery
            $images = $product.find('.product-image img:first-child');
        }
        if ($images.length) {
            images = $images.map(function () {
                var $this = $(this);
                return {
                    src: $this.attr('data-zoom-image'),
                    w: 800,
                    h: 900,
                    title: $this.attr('alt')
                };
            }).get();
            var swiper = $product.find('.product-single-swiper').data('slider'),
                curIndex = swiper ?
                    // Carousel Type
                    swiper.activeIndex :
                    // Gallery Type
                    $product.find('.product-gallery .product-gallery-btn').index($this);
            if ($review.length == 1) {
                var reviewIndex = $review.find('img').index($this);
                curIndex = reviewIndex;
            }
            if (typeof PhotoSwipe !== 'undefined') {
                var pswpElement = $('.pswp')[0];
                if (Trabna.$body.attr('dir') == 'rtl') {
                    var photoSwipe = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, images, {
                        index: curIndex,
                        closeOnScroll: false,
                        showAnimationDuration: 0,
                        rtl: true
                    });
                }
                else {
                    var photoSwipe = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, images, {
                        index: curIndex,
                        closeOnScroll: false,
                        showAnimationDuration: 0,
                    });
                }
                photoSwipe.init();
                Trabna.photoSwipe = photoSwipe;
            }
        }
    }
  
    function stickyProduct(selector) {
        var $this = $(selector),
            $product = $this.closest('.product-single'),
            src = $product.find('.product-image img').eq(0).attr('src'),
            name = $product.find('.product-details .product-title').text(),
            newPrice = $product.find('.new-price').text(),
            oldPrice = $product.find('.old-price').text(),
            stickyProductDetailsHtml = '<div class="product product-list-sm mr-auto">\
                                        <figure class="product-media">\
                                        <img src="'+ src + '" alt="Product" width="85" height="85" />\
                                        </figure>\
                                        <div class="product-details pt-0 pl-2 pr-2">\
                                        <h4 class="product-name font-weight-normal mb-1">'+ name + '</h4>\
                                        <div class="product-price mb-0">\
                                        <ins class="new-price">'+ newPrice + '</ins><del class="old-price">' + oldPrice + '</del></div>\
                                        </div></div>';
        $this.find('.product-qty-form').before(stickyProductDetailsHtml);
        function refreshStickyProduct() {
            if ($this.hasClass('fix-top') && window.innerWidth > 767) {
                $this.removeClass('fix-top').addClass('fix-bottom');
            }
            if ($this.hasClass('fix-bottom') && window.innerWidth > 767) {
                return;
            }
            if ($this.hasClass('fix-bottom') && window.innerWidth < 768) {
                $this.removeClass('fix-bottom').addClass('fix-top');
            }
            if ($this.hasClass('fix-top') && window.innerWidth < 768) {
                return;
            }
        }
        window.addEventListener('resize', refreshStickyProduct, { passive: true });
        refreshStickyProduct();
    }
    Trabna.initProductSinglePage = function () {
        // Zoom Image for grid type
        $('.product-gallery').each(function () {
            var $this = $(this),
                $images = $this.find('.product-image');
            $images.length && $this.find('.swiper-container').length == 0 && $images.zoom(Trabna.zoomImageOptions);
			
			 var magnificPopupx=function() {
            var i = $("[data-lightbox]");
            if (i.length > 0) {
                if (void 0 === $.fn.magnificPopup)
                    return INSPIRO.elements.notification("Warning", "jQuery magnificPopup plugin is missing in plugins.js file.", "danger"),
                    !0;
                var e = {
                    image: {
                        type: "image",
                        closeOnContentClick: !0,
                        removalDelay: 500,
                        image: {
                            verticalFit: !0
                        },
                        callbacks: {
                            beforeOpen: function() {
                                this.st.image.markup = this.st.image.markup.replace("mfp-figure", "mfp-figure mfp-with-anim"),
                                this.st.mainClass = "mfp-zoom-out"
                            }
                        }
                    },
                    gallery: {
                        delegate: 'a[data-lightbox="gallery-image"], a[data-lightbox="image"]',
                        type: "image",
                        image: {
                            verticalFit: !0
                        },
                        gallery: {
                            enabled: !0,
                            navigateByImgClick: !0,
                            preload: [0, 1]
                        },
                        removalDelay: 500,
                        callbacks: {
                            beforeOpen: function() {
                                this.st.image.markup = this.st.image.markup.replace("mfp-figure", "mfp-figure mfp-with-anim"),
                                this.st.mainClass = "mfp-zoom-out"
                            }
                        }
                    },
                    iframe: {
                        type: "iframe",
                        removalDelay: 500,
                        callbacks: {
                            beforeOpen: function() {
                                this.st.image.markup = this.st.image.markup.replace("mfp-figure", "mfp-figure mfp-with-anim"),
                                this.st.mainClass = "mfp-zoom-out"
                            }
                        }
                    },
                    ajax: {
                        type: "ajax",
                        removalDelay: 500,
                        callbacks: {
                            ajaxContentAdded: function(t) {
                                INSPIRO.elements.functions()
                            }
                        }
                    },
                    inline: {
                        type: "inline",
                        removalDelay: 500,
                        closeBtnInside: !0,
                        midClick: !0,
                        callbacks: {
                            beforeOpen: function() {
                                this.st.image.markup = this.st.image.markup.replace("mfp-figure", "mfp-figure mfp-with-anim"),
                                this.st.mainClass = "mfp-zoom-out"
                            },
                            open: function() {
                                $(this.content).find("video").length > 0 && $(this.content).find("video").get(0).play()
                            },
                            close: function() {
                                $(this.content).find("video").length > 0 && $(this.content).find("video").ge$(0).load()
                            }
                        },
                        fixedContentPos: !0,
                        overflowY: "scroll"
                    }
                };
                i.each(function() {
                    var i = $(this);
                    switch (i.attr("data-lightbox")) {
                    case "image":
                        i.magnificPopup(e.image);
                        break;
                    case "gallery":
                        i.magnificPopup(e.gallery);
                        break;
                    case "iframe":
                        i.magnificPopup(e.iframe);
                        break;
                    case "ajax":
                        i.magnificPopup(e.ajax);
                        break;
                    case "inline":
                        i.magnificPopup(e.inline)
                    }
                })
            }
        }
		magnificPopupx()
        });
        stickyProduct('.product-sticky-content')
        // Register events
        if (!document.body.classList.contains('home')) {
            Trabna.$body
                .on('click', '.product-image-full', openImageGallery)
                .on('click', '.review-image img', openImageGallery)
                
                
        }
    }
})(jQuery);
/**
 * Trabna Plugin - Code Popup
 * 
 * 
*/
(function ($) {
    Trabna.initCodePopup = function () {
        $('.box-btn.showcode span').each(function () {
            $(this).text('</>');
        });
        $('.show-code-action').each(function () {
            var $this = $(this);
            var tempCode = $this[0].outerHTML.replace('show-code-action', ''),
                deleteEnd = tempCode.slice(1, tempCode.length - 1).indexOf("<"),
                deleteFirst = tempCode.indexOf(">"),
                strTemp, code;
            if (deleteEnd - deleteFirst > 6) {
                strTemp = new RegExp('\n' + String(' ').repeat(deleteEnd - deleteFirst - 6), 'gi');
                code = tempCode.replace(strTemp, '\n');
            }
            else {
                code = tempCode;
            }
            $this.data('codepopup', code);
        });
        Trabna.$body.on('click', '.box-btn.showcode', function () {
            var $this = $(this);
            if ($this.hasClass('enabled')) {
                $this.removeClass('enabled').addClass('disabled');
                $this.children('p')[0].innerHTML = 'Show Code: Disabled';
                $('.show-code-action').each(function () {
                    var $wrapper = $(this);
                    $wrapper.removeClass('show-code-added');
                    setTimeout(function () {
                        $wrapper[0].removeChild($wrapper[0].lastElementChild);
                    }, 300);
                });
            }
            else {
                $this.removeClass('disabled').addClass('enabled');
                $this.children('p')[0].innerHTML = 'Show Code: Enabled';
                $('.show-code-action').each(function () {
                    var $this = $(this);
                    var showCode = document.createElement('span');
                    showCode.className = 'show-code';
                    showCode.appendChild(document.createTextNode('</>'));
                    this.appendChild(showCode);
                    setTimeout(function () { $this.addClass('show-code-added') }, 200);
                });
            }
        });
        Trabna.$body.on('click', '.show-code', function (e) {
            e.stopPropagation();
            var $wrapper = $(this).parent();
            if ($wrapper.hasClass('show-code-added')) {
                var btnCopy = $wrapper[0].lastElementChild;
                $wrapper[0].removeChild(btnCopy);
                $('.code-popup #textareaCode').text($wrapper.data('codepopup'));
                $('.code-copy a').html('<i class="copy-icon far fa-copy"></i>Copy to Clipboard');
                Trabna.$body.on('click', '.code-copy a', function (e) {
                    e.preventDefault();
                    $('.code-popup #textareaCode').trigger('select');
                    document.execCommand('copy');
                    $(this).html('<i class="copy-icon far fa-copy"></i>Copied');
                });
                setTimeout(function () {
                    Trabna.popup({
                        items: {
                            src: ".code-popup"
                        },
                        type: 'inline',
                        tLoading: '',
                        mainClass: 'mfp-code mfp-fadein-popup'
                    });
                    $('.CodeMirror').remove();
                    CodeMirror.fromTextArea(document.getElementById('textareaCode'),
                        {
                            mode: 'text/html',
                            htmlMode: true,
                            lineWrapping: false,
                            smartIndent: false,
                            spellcheck: true,
                            addModeClass: true,
                            readOnly: true
                        });
                }, 100);
                $wrapper[0].appendChild(btnCopy);
            }
        });
        Trabna.$body.on('mouseenter mouseleave', '.show-code-action', function (e) {
            e.stopPropagation();
        });
    }
})(jQuery);
/**
 * Womart Plugin - Calendar
 *
 * @instance multiple
 */
(function ($) {
    function Calendar(el, options) {
        return this.init(el, options);
    }
    // Private Members
    var updateHeader = function (date) {
        var self = this;
        var mt = self.settings.months[date.getMonth()];
        mt += self.settings.displayYear ? ' ' + date.getFullYear() : '';
        self.element.find('.calendar-title').html(mt);
    }
    // Public Members
    Calendar.defaultOptions = {
        months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        days: ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],
        displayYear: true,      // Display year in header
        fixedStartDay: true,    // Week always begins with Sunday or Monday by setting number 0 or 1. If startDay is false, week always begin with firstday of month 
        dayNumber: 0,           // Week always begins with Sunday
        dayExcerpt: 3,          // length of abbreviation of day. If it is equal to 3, the day will be "Sun", "Mon", etc
    }
    Calendar.prototype.init = function ($el, options) {
        var self = this;
        self.element = $el;    // calendar container element
        self.settings = $.extend({}, true,
            Calendar.defaultOptions,
            Trabna.parseOptions($el.attr('data-calendar-options')),
            options
        ); // extend default options with user defined options
        self.today = new Date();
        // Bind this to update header
        updateHeader = updateHeader.bind(this);
        var $calendar = $('<div class="calendar"></div>'),
            $header = $('<div class="calendar-header">' +
                '<a href="#" class="btn-calendar btn-calendar-prev"><i class="la la-angle-left"></i></a>' +
                '<span class="calendar-title"></span>' +
                '<a href="#" class="btn-calendar btn-calendar-next"><i class="la la-angle-right"></i></a>' +
                '</div>');
        $calendar.append($header);
        $el.append($calendar);
        // update Calendar header
        updateHeader(self.today);
        self.render(self.today, $calendar);
        self.bindEvents();
    }
    /**
     * render
     *
     * 
     * Render Calendar
     * @param {Date} fd 
     * @param {HTMLElement} $calendar 
     */
    Calendar.prototype.render = function (fd, $calendar) {
        var self = this;
        // if calendar table already exists, remove it
        $calendar.find('table') &&
            $calendar.find('table').remove();
        var $table = $('<table></table>'),
            $thead = $('<thead></thead>'),
            $tbody = $('<tbody></tbody'),
            y = fd.getFullYear(),
            m = fd.getMonth();
        var firstDay = new Date(y, m, 1),         // get the first day of the month
            lastDay = new Date(y, m + 1, 0),      // get the last day of the month
            startDayOfWeek = firstDay.getDay();     // get the first day of the week
        if (self.settings.fixedStartDay) {
            startDayOfWeek = self.settings.dayNumber;
            // If the first day of the month is different with start of week, get more days of prev month to fill calendar
            while (firstDay.getDay() != startDayOfWeek) {
                firstDay.setDate(firstDay.getDate() - 1);
            }
            // If the last day of the month is difference with end of week, get more days of next month to be displayed in calendar
            while (lastDay.getDay() != (startDayOfWeek + 7) % 7) {
                lastDay.setDate(lastDay.getDate() + 1);
            }
        }
        // Get days in week
        for (var i = startDayOfWeek; i < startDayOfWeek + 7; i++) {
            var th = $('<th>' + self.settings.days[i % 7].substring(0, self.settings.dayExcerpt) + '</th>');
            i % 7 == 0 && th.addClass('holiday');
            $thead.append(th);
        }
        // Displays days from fristday to lastday in calendar
        for (var day = firstDay; day < lastDay; day.setDate(day.getDate())) {
            var tr = $('<tr></tr>');
            // Make each row of calendar
            for (var i = 0; i < 7; i++) {
                var td = $('<td><span class="day" data-date="' + day.toISOString() + '">' + day.getDate() + '</span></td>');
                // If the day is equal to today
                (day.toDateString() == (new Date).toDateString()) &&
                    td.find('.day').addClass('today');
                // If the day is out of current month
                (day.getMonth() != fd.getMonth()) &&
                    td.find('.day').addClass('disabled');
                tr.append(td);
                day.setDate(day.getDate() + 1);
            }
            $tbody.append(tr);
        };
        $table.append($thead);
        $table.append($tbody);
        $calendar.append($table);
    }
    /**
     * changeMonth
     *
     * 
     * Change Month
     * @param {Number} dm - increment of month
     */
    Calendar.prototype.changeMonth = function (dm) {
        this.today.setMonth(this.today.getMonth() + dm, 1);
        this.render(this.today, $(this.element).find('.calendar'));
        updateHeader(this.today);
    }
    /**
     * bindEvents
     *
     * 
     * Bind events to prev & next button
     */
    Calendar.prototype.bindEvents = function () {
        var self = this;
        // Register event to prev btn
        $(self.element).find('.btn-calendar-prev').on('click', function (e) {
            self.changeMonth(-1);
            e.preventDefault();
        });
        // Register event to next btn
        $(self.element).find('.btn-calendar-next').on('click', function (e) {
            self.changeMonth(1);
            e.preventDefault();
        });
    }
    Trabna.calendar = function (selector, options) {
        Trabna.$(selector).each(function () {
            var $this = $(this);
            Trabna.call(function () {
                new Calendar($this, options);
            });
        });
    }
    Trabna.initVendor = function (selector) {
        var $this = $(selector),
            $btnSearchVendor = $this.closest('.page-content').find('.toolbox .vendor-search-toggle'),
            $phone = $this.find('.store-phone');
        $btnSearchVendor.on('click', function (e) {
            var $searchWrapper = $btnSearchVendor.closest('.vendor-toolbox').next('.vendor-search-wrapper');
            if (!$searchWrapper.hasClass('open')) {
                $searchWrapper.addClass('open').slideDown();
            } else {
                $searchWrapper.removeClass('open').slideUp();
            }
            e.preventDefault();
        });
        $phone.on('click', function () {
            alert('Always open these types of links in the associated app');
        });
    }
    Trabna.slideContent = function (selector) {
        var $this = $(selector),
            $content = $this.next();
        $this.on('click', function (e) {
            e.preventDefault();
            if (!$content.hasClass('open')) {
                $content.addClass('open').slideDown();
                $this.find('.custom-checkbox').addClass('checked');
            } else {
                $content.removeClass('open').slideUp();
                $this.find('.custom-checkbox').removeClass('checked');
            }
        })
    }
    // Login vendor in login page
    Trabna.initLoginVendor = function (selector) {
        var $this = $(selector),
            $LoginVendorPanel = $this.parent().find('.login-vendor'),
            $checkCustomer = $this.find('.check-customer'),
            $checkVendor = $this.find('.check-seller');
        $checkVendor.on('click', function () {
            $this.find('#check-seller').addClass('active');
            $this.find('#check-customer').removeClass('active');
            $LoginVendorPanel.slideDown();
        });
        $checkCustomer.on('click', function () {
            $this.find('#check-customer').addClass('active');
            $this.find('#check-seller').removeClass('active');
            $LoginVendorPanel.slideUp();
        });
    }
})(jQuery);
/**
 * Trabna Theme
 */
(function ($) {
    // Initialize Method while document is interactive
    Trabna.initLayout = function () {
        // do something later...
        Trabna.isotopes('.grid:not(.grid-float)');
        Trabna.stickySidebar('.sticky-sidebar');
    };
    // Initialize Method after document has been loaded
    Trabna.init = function () {
        // do something later...
        Trabna.appearAnimate('.appear-animate');                           // Run appear animation
        Trabna.setTab('.nav-tabs');                                        // Initialize Tab
        Trabna.stickyContent('.sticky-header', { scrollMode: false,top:300 });     // Initialize Sticky Content
        
        Trabna.stickyContent('.sticky-toolbox', Trabna.stickyToolboxOptions);
        Trabna.stickyContent('.product-sticky-content', Trabna.stickyProductOptions);
        Trabna.parallax('.parallax');                                      // Initialize Parallax
        Trabna.skrollrParallax();                                          // Initialize Skrollr Parallax
        Trabna.initFloatingParallax();                                     // Initialize Floating Parallax
        Trabna.menu.init();                                                // Initialize Menu
        Trabna.initScrollTopButton();                                      // Initialize scroll top button
        Trabna.shop.init();                                                // Initialize Shop
        Trabna.alert('.alert')                                             // Initialize Alert
        Trabna.closeTopNotice('.banner-close');                            // Initialize Close Top Notice
        Trabna.accordion('.card-header > a')                               // Initialize Accordion
        Trabna.sidebar('sidebar');                                         // Initialize Sidebar
        Trabna.sidebar('right-sidebar');                                   // Initialize Right Sidebar
        Trabna.productSingle('.product-single');                           // Initialize all single products
        Trabna.initProductSinglePage();                                    // Initialize Single Product Page                       
        Trabna.initNavFilter('.nav-filters .nav-filter')                   // Initialize Isotope Navigation Filters
        Trabna.calendar('.calendar-container');                            // Initialize Calendar
                      // Initialize CountDown
        Trabna.initPopup();                                                // Initialize Popup
        Trabna.initNotificationAlert();                                    // Initialize Notification Alert
        Trabna.countTo('.count-to');                                       // Initialize CountTo 
        Trabna.initCartAction('.cart-offcanvas .cart-toggle,.openCartSidebar');             // Initialize Product Cart
        Trabna.Minipopup.init();                                           // Initialize minipopup
        Trabna.headerToggleSearch('.hs-toggle');                           // Initialize Header toggle search
        Trabna.initVendor('.store');                                       // Initialize Vendor 
        Trabna.slideContent('.login-toggle');                              // Initialize Slide Content
        Trabna.slideContent('.coupon-toggle');
        Trabna.slideContent('.checkbox-toggle');
        Trabna.initLoginVendor('.user-checkbox');                          // Initialize Vendor's Login
        Trabna.initCodePopup();
        Trabna.slider('.swiper-container');                                // Initialize Slider
        Trabna.call(Trabna.slider.pgToggle);
        Trabna.$window.on('resize', function () {
            Trabna.call(Trabna.slider.pgToggle);
        });
    };
})(jQuery);
/**
 * Trabna Theme Initializer
 */
(function ($) {
    'use strict';
    window.onload = function () {        
        // Canvas Size
        Trabna.canvasWidth = window.innerWidth;
        Trabna.resizeTimeStamp = 0;
        Trabna.resizeChanged = false;
        // loaded
        Trabna.status = 'loaded';
		$("#loader").hide();
        document.body.classList.add('loaded');
        Trabna.call(Trabna.initLayout);
        Trabna.call(Trabna.init);
        Trabna.status = 'complete';
        Trabna.$window.trigger('Trabna_complete');
    }
})(jQuery);
